"""Migrate the BDC-Catalog to v1.0.0

See more in CHANGES.rst

Revision ID: d01f09b5dd8b
Revises: 561ebe6266ad
Create Date: 2022-06-08 12:06:57.476168

"""
from alembic import op
import geoalchemy2.types
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from bdc_db.sqltypes import JSONB

# revision identifiers, used by Alembic.
revision = 'd01f09b5dd8b'
down_revision = '561ebe6266ad'
branch_labels = ()
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('processors',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('facility', sa.String(length=255), nullable=False),
    sa.Column('level', sa.String(length=32), nullable=False),
    sa.Column('version', sa.String(length=32), nullable=False),
    sa.Column('uri', sa.String(length=255), nullable=True),
    sa.Column('metadata', JSONB('bdc-catalog/processor.json', astext_type=sa.Text()), nullable=True, comment='Follow the JSONSchema @jsonschemas/application-metadata.json'),
    sa.Column('created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('processors_pkey')),
    sa.UniqueConstraint('name', 'version', name=op.f('processors_name_key')),
    schema='bdc'
    )
    op.create_table('items_processors',
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('processor_id', sa.Integer(), nullable=False),
    sa.Column('created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['bdc.items.id'], name=op.f('items_processors_item_id_items_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['processor_id'], ['bdc.processors.id'], name=op.f('items_processors_processor_id_processors_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('item_id', 'processor_id', name=op.f('items_processors_pkey')),
    schema='bdc'
    )
    op.drop_column('items', 'application_id', schema='bdc')
    op.drop_table('applications', schema='bdc')
    op.add_column('bands', sa.Column('scale_mult', sa.Numeric(), nullable=True, comment='The scale value multiplier'), schema='bdc')
    op.add_column('bands', sa.Column('scale_add', sa.Numeric(), nullable=True, comment='The value to sum in scale mult'), schema='bdc')
    op.create_index(op.f('idx_bdc_bands_resolution_unit_id'), 'bands', ['resolution_unit_id'], unique=False, schema='bdc')
    op.drop_column('bands', 'center_wavelength', schema='bdc')
    op.drop_column('bands', 'full_width_half_max', schema='bdc')
    op.drop_column('bands', 'resolution_x', schema='bdc')
    op.drop_column('bands', 'resolution_y', schema='bdc')
    op.drop_column('bands', 'scale', schema='bdc')

    bind = op.get_bind()
    collection_category_type = postgresql.ENUM('eo', 'sar', 'lidar', 'unknown', name='collection_category_type')
    collection_category_type.create(bind)

    provider_role_type = postgresql.ENUM('licensor', 'producer', 'processor', 'host', name='provider_role_type')
    provider_role_type.create(bind)

    op.add_column('collections', sa.Column('keywords', sa.ARRAY(sa.String()), nullable=True), schema='bdc')
    op.add_column('collections', sa.Column('properties', JSONB('bdc-catalog/collection-properties.json'), nullable=True, comment='Contains the properties offered by STAC collections'), schema='bdc')
    op.add_column('collections', sa.Column('summaries', JSONB('bdc-catalog/collection-summaries.json'), nullable=True, comment='Contains the STAC Collection summaries.'), schema='bdc')
    op.add_column('collections', sa.Column('item_assets', JSONB('bdc-catalog/collection-item-assets.json'), nullable=True, comment='Contains the STAC Extension Item Assets.'), schema='bdc')
    op.add_column('collections', sa.Column('is_available', sa.Boolean(), nullable=False), schema='bdc')
    op.add_column('collections', sa.Column('category', sa.Enum('eo', 'sar', 'lidar', 'unknown', name='collection_category_type'), nullable=False), schema='bdc')
    op.add_column('collections', sa.Column('spatial_extent', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True), schema='bdc')
    op.alter_column('collections', 'version',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False,
               schema='bdc')
    op.drop_index('idx_bdc_collections_extent', table_name='collections', schema='bdc')
    op.create_index(op.f('idx_bdc_collections_category'), 'collections', ['category'], unique=False, schema='bdc')
    op.create_index(op.f('idx_bdc_collections_is_available'), 'collections', ['is_available'], unique=False, schema='bdc')
    op.create_index(op.f('idx_bdc_collections_is_public'), 'collections', ['is_public'], unique=False, schema='bdc')
    op.create_index(op.f('idx_bdc_collections_spatial_extent'), 'collections', ['spatial_extent'], unique=False, schema='bdc', postgresql_using='gist')
    op.create_index(op.f('idx_bdc_collections_start_date'), 'collections', ['start_date', 'end_date'], unique=False, schema='bdc')
    op.drop_column('collections', 'extent', schema='bdc')
    op.add_column('collections_providers', sa.Column('roles', sa.ARRAY(sa.Enum('licensor', 'producer', 'processor', 'host', name='provider_role_type')), nullable=False), schema='bdc')
    op.create_index(op.f('idx_bdc_collections_providers_roles'), 'collections_providers', ['roles'], unique=False, schema='bdc')
    op.drop_column('collections_providers', 'active', schema='bdc')
    op.drop_column('collections_providers', 'priority', schema='bdc')
    op.add_column('items', sa.Column('is_public', sa.Boolean(), server_default=sa.text('true'), nullable=False), schema='bdc')
    op.add_column('items', sa.Column('is_available', sa.Boolean(), server_default=sa.text('false'), nullable=False), schema='bdc')
    op.add_column('items', sa.Column('bbox', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True), schema='bdc')
    op.add_column('items', sa.Column('footprint', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True), schema='bdc')
    op.drop_index('idx_bdc_items_geom', table_name='items', schema='bdc')
    op.drop_index('idx_bdc_items_min_convex_hull', table_name='items', schema='bdc')
    op.create_index(op.f('idx_bdc_items_bbox'), 'items', ['bbox'], unique=False, schema='bdc', postgresql_using='gist')
    op.create_index(op.f('idx_bdc_items_footprint'), 'items', ['footprint'], unique=False, schema='bdc', postgresql_using='gist')
    op.create_index(op.f('idx_bdc_items_is_available'), 'items', ['is_available'], unique=False, schema='bdc')
    op.create_index(op.f('idx_bdc_items_is_public'), 'items', ['is_public'], unique=False, schema='bdc')
    op.create_index(op.f('idx_bdc_items_metadata'), 'items', ['metadata'], unique=False, schema='bdc')
    op.drop_constraint('items_srid_spatial_ref_sys_fkey', 'items', schema='bdc', type_='foreignkey')

    op.execute('ALTER TABLE bdc.items DROP CONSTRAINT IF EXISTS items_application_id_applications_fkey')

    op.create_foreign_key(op.f('items_srid_spatial_ref_sys_fkey'), 'items', 'spatial_ref_sys', ['srid'], ['srid'], source_schema='bdc', referent_schema='public', onupdate='CASCADE', ondelete='CASCADE')

    op.execute('ALTER TABLE bdc.items DROP COLUMN IF EXISTS application_id')

    op.drop_column('items', 'geom', schema='bdc')
    op.drop_column('items', 'min_convex_hull', schema='bdc')
    op.add_column('providers', sa.Column('url', sa.String(length=255), nullable=True), schema='bdc')
    op.drop_column('providers', 'credentials', schema='bdc')
    op.drop_column('providers', 'uri', schema='bdc')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('providers', sa.Column('uri', sa.VARCHAR(length=255), autoincrement=False, nullable=True), schema='bdc')
    op.add_column('providers', sa.Column('credentials', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Follow the JSONSchema @jsonschemas/provider-credentials.json'), schema='bdc')
    op.drop_column('providers', 'url', schema='bdc')
    op.add_column('items', sa.Column('min_convex_hull', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), autoincrement=False, nullable=True), schema='bdc')
    op.add_column('items', sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), autoincrement=False, nullable=True), schema='bdc')
    op.add_column('items', sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=True), schema='bdc')
    op.drop_constraint(op.f('items_srid_spatial_ref_sys_fkey'), 'items', schema='bdc', type_='foreignkey')
    op.create_foreign_key('items_srid_spatial_ref_sys_fkey', 'items', 'spatial_ref_sys', ['srid'], ['srid'], source_schema='bdc', onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index(op.f('idx_bdc_items_metadata'), table_name='items', schema='bdc')
    op.drop_index(op.f('idx_bdc_items_is_public'), table_name='items', schema='bdc')
    op.drop_index(op.f('idx_bdc_items_is_available'), table_name='items', schema='bdc')
    op.drop_index(op.f('idx_bdc_items_footprint'), table_name='items', schema='bdc', postgresql_using='gist')
    op.drop_index(op.f('idx_bdc_items_bbox'), table_name='items', schema='bdc', postgresql_using='gist')
    op.create_index('idx_bdc_items_min_convex_hull', 'items', ['min_convex_hull'], unique=False, schema='bdc')
    op.create_index('idx_bdc_items_geom', 'items', ['geom'], unique=False, schema='bdc')
    op.drop_column('items', 'footprint', schema='bdc')
    op.drop_column('items', 'bbox', schema='bdc')
    op.drop_column('items', 'is_available', schema='bdc')
    op.drop_column('items', 'is_public', schema='bdc')
    op.add_column('collections_providers', sa.Column('priority', sa.SMALLINT(), autoincrement=False, nullable=False), schema='bdc')
    op.add_column('collections_providers', sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=False), schema='bdc')
    op.drop_index(op.f('idx_bdc_collections_providers_roles'), table_name='collections_providers', schema='bdc')
    op.drop_column('collections_providers', 'roles', schema='bdc')
    op.add_column('collections', sa.Column('extent', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), autoincrement=False, nullable=True), schema='bdc')
    op.drop_index(op.f('idx_bdc_collections_start_date'), table_name='collections', schema='bdc')
    op.drop_index(op.f('idx_bdc_collections_spatial_extent'), table_name='collections', schema='bdc', postgresql_using='gist')
    op.drop_index(op.f('idx_bdc_collections_is_public'), table_name='collections', schema='bdc')
    op.drop_index(op.f('idx_bdc_collections_is_available'), table_name='collections', schema='bdc')
    op.drop_index(op.f('idx_bdc_collections_category'), table_name='collections', schema='bdc')
    op.create_index('idx_bdc_collections_extent', 'collections', ['extent'], unique=False, schema='bdc')
    op.alter_column('collections', 'version',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               schema='bdc')
    op.drop_column('collections', 'spatial_extent', schema='bdc')
    op.drop_column('collections', 'category', schema='bdc')

    bind = op.get_bind()
    collection_category_type = postgresql.ENUM('eo', 'sar', 'lidar', 'unknown', name='collection_category_type')
    collection_category_type.drop(bind, checkfirst=False)
    postgresql.ENUM(name='provider_role_type').drop(bind)

    op.drop_column('collections', 'is_available', schema='bdc')
    op.drop_column('collections', 'item_assets', schema='bdc')
    op.drop_column('collections', 'summaries', schema='bdc')
    op.drop_column('collections', 'properties', schema='bdc')
    op.drop_column('collections', 'keywords', schema='bdc')
    op.add_column('bands', sa.Column('scale', sa.NUMERIC(), autoincrement=False, nullable=True), schema='bdc')
    op.add_column('bands', sa.Column('resolution_y', sa.NUMERIC(), autoincrement=False, nullable=True), schema='bdc')
    op.add_column('bands', sa.Column('resolution_x', sa.NUMERIC(), autoincrement=False, nullable=True), schema='bdc')
    op.add_column('bands', sa.Column('full_width_half_max', sa.NUMERIC(), autoincrement=False, nullable=True), schema='bdc')
    op.add_column('bands', sa.Column('center_wavelength', sa.NUMERIC(), autoincrement=False, nullable=True), schema='bdc')
    op.drop_index(op.f('idx_bdc_bands_resolution_unit_id'), table_name='bands', schema='bdc')
    op.drop_column('bands', 'scale_add', schema='bdc')
    op.drop_column('bands', 'scale_mult', schema='bdc')
    op.create_table('applications',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('bdc.applications_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('uri', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Follow the JSONSchema @jsonschemas/application-metadata.json'),
    sa.Column('created', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='applications_pkey'),
    sa.UniqueConstraint('name', 'version', name='applications_name_key'),
    schema='bdc'
    )
    op.add_column('items', sa.Column('application_id', sa.Integer(), nullable=True),
                  schema='bdc')
    op.create_foreign_key('items_application_id_applications_fkey', 'items', 'applications', ['application_id'], ['id'], source_schema='bdc', referent_schema='bdc', onupdate='CASCADE', ondelete='CASCADE')
    op.drop_table('items_processors', schema='bdc')
    op.drop_table('processors', schema='bdc')
    # ### end Alembic commands ###
